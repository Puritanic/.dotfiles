[user]
    name = Darkø Tasevski
    email = darko.tasevski@redbox.com # office mail
    # email = darktasevski@gmail.com # Home mail
    signingkey = 58AC580B134D81B6

[gpg]
	program = gpg

[commit]
	# https://help.github.com/articles/signing-commits-using-gpg/
	gpgsign = true

[apply]
	# Detect whitespace errors when applying a patch
	whitespace = fix

[format]
  	pretty = "%Cred%h%Creset -%C(yellow)%d%Creset %s %Cgreen(%cr) %C(bold blue)<%an>%Creset"

[core]
    editor = vim
    # Use custom `.gitignore` and `.gitattributes`
    excludesfile = ~/.gitignore_global
    attributesfile = ~/.gitattributes_global

    # auto-converts crlf=>lf on checkin
    autocrlf = input

	# Treat spaces before tabs and all kinds of trailing whitespace as an error
	# [default] trailing-space: looks for spaces at the end of a line
	# [default] space-before-tab: looks for spaces before tabs at the beginning of a line
	whitespace = space-before-tab,-indent-with-non-tab,trailing-space

	# Make `git rebase` safer on macOS
	# More info: <http://www.git-tower.com/blog/make-git-rebase-safe-on-osx/>
	trustctime = false

	# Prevent showing files whose names contain non-ASCII symbols as unversioned.
	# http://michael-kuehnel.de/git/2014/11/21/git-mac-osx-and-german-umlaute.html
	precomposeunicode = false

	# Speed up commands involving untracked files such as `git status`.
	# https://git-scm.com/docs/git-update-index#_untracked_cache
	untrackedCache = true
	pager = diff-so-fancy | less --tabs=4 -RFX

[color]
	# Use colors in Git commands that are capable of colored output when
	# outputting to the terminal. (This is the default setting in Git ≥ 1.8.4.)
	ui = true

[color "branch"]
	current = cyan reverse bold
	local = yellow
	remote = green

[color "diff"]
	meta = 11
	frag = magenta bold
	old = red bold
	new = green bold
	commit = yellow bold
	whitespace = red reverse

[color "diff-highlight"]
	oldNormal = red bold
	oldHighlight = red bold 52
	newNormal = green bold
	newHighlight = green bold 22

[color "status"]
	header = blue
	added = green bold
	changed = yellow bold
	untracked = cyan

[push]
	# When pushing code, always push only your current branch to a branch of the same name
	default = current
	# Make `git push` push relevant annotated tags when pushing branches out.
	followTags = true

[pull]
    rebase = true

[merge]
	# Include summaries of merged commits in newly created merge commit messages
	log = true

[diff]
	# Detect copies as well as renames
	renames = copies
    tool = vimdiff

[difftool]
	prompt = false

[diff "bin"]
	# Use `hexdump` to diff binary files
	textconv = hexdump -v -C

[alias]
	aliases = config --get-regexp alias # List aliases
    au = add --update
    cam = commit --all --message
    com = commit --message
    config = config --global --list
    fap = fetch --all --prune # Fetch all remotes and remove any remote-tracking references that no longer exist on the remote.
    info = remote show origin # displays info for your remote origin repo
    uncommit = reset --soft HEAD~1 # remove the last commit from the current branch, but the file changes will stay in the working tree
    undopush = push -f origin HEAD^:master
    st = status -sb     # show short format and branch info
    unstage = reset HEAD -- # Reset a single file in the index. Usage: git unstage frotz.c
    upfork = fetch upstream; git checkout master; git merge upstream/master
    put = !git commit --all && git push
    get = !git fetch --prune && git pull --rebase=preserve && git submodule update --init --recursive
    fix = commit --amend --no-edit
    # List all the files touched in this commit
    files = "![ x$# != x1 ]&&echo "commit-ish required" >&2 || git diff --name-status \"$1\"^ \"$1\" #"
    stashes = stash list
    sta = stash
    staa = stash apply

    ##### short and sweet #####
    p = push
    m = merge --no-ff
    l = pull
    b = branch -v
    # cb = checkout -b
    cm = checkout master
    co = checkout
    aa = add .
    cu = gc --aggressive # Cleanup unnecessary files and optimize the local repository
    di = diff --ignore-all-space
    dw = diff --color-words
    ts = status -uno
    lr = rev-list --left-right --count master... # Lists commit objects in reverse chronological order
    mb = merge-base $(current_branch) master  # Find as good common_config ancestors as possible for a merge
    poh = push origin HEAD
    # Clone a repository including all submodules
    c = clone --recursive
    # Commit all changes (verbose)
    ca = !git add -A && git commit -av
    # Switch to a branch, creating it if necessary
    cb = "!f() { git checkout -b \"$1\" 2> /dev/null || git checkout \"$1\"; }; f"
    rv = git remote -v

    ##### Semantic commits #####
    cdo = "!f() { git commit -m \"docs: $1\"; }; f"
    cfe = "!f() { git commit -m \"feat: $1\"; }; f"
    cfi = "!f() { git commit -m \"fix: $1\"; }; f"
    cho = "!f() { git commit -m \"chore: $1\"; }; f"
    clo = "!f() { git commit -m \"localize: $1\"; }; f"
    cre = "!f() { git commit -m \"refactor: $1\"; }; f"
    cst = "!f() { git commit -m \"style: $1\"; }; f"
    cte = "!f() { git commit -m \"test: $1\"; }; f"
    # Usage: git cho "add build scripts for travis"

    ##### log aliases #####
    # View abbreviated SHA, description, history graph, time and author
    glog = log --color --graph --date=iso --pretty=format':%Cred%h%Creset -%C(yellow)%d%Creset %s %Cgreen(%ci) %C(bold blue)<%an>%Creset' --abbrev-commit --
    # Show a formatted commit tree
    tree = log --graph --abbrev-commit --decorate --date=relative --format=format':%C(bold blue)%h%C(reset) - %C(bold green)(%ar)%C(reset) %C(white)%s%C(reset) %C(dim white)- %an%C(reset)%C(bold yellow)%d%C(reset)' --all
    ## show branching graphically as ascii art
    lg = log --color --graph --pretty=format:'%Cred%h%Creset -%C(yellow)%d%Creset %s %Cgreen(%cr) %C(bold blue)<%an>%Creset' --abbrev-commit
    lgng = log --pretty=format:'%d %s (%cr) <%an>' # ng = no graph
    # View abbreviated SHA, description, and history graph of the latest 20 commits
	logl = log --pretty=oneline -n 20 --graph --abbrev-commit
    svnlog = log --name-status

    ## logwork
    standup = log --since '1 day ago' --oneline --author $(git config user.email)
    jira = log --since '6am' --oneline --author $(git config user.email)
    mwlis = log --since '7 days ago' --author $(git config user.email) --format='%ai %s%n%b'
    log-my-week = !git log --author $(git config user.email) --since "1 week ago"

    ##### diff aliases #####

	# Show the diff between the latest commit and the current state
	df = !"git diff-index --quiet HEAD -- || clear; git --no-pager diff --patch-with-stat"

	# `git di $number` shows the diff between the state `$number` revisions ago and the current state
	dfi = !"d() { git diff --patch-with-stat HEAD~$1; }; git diff-index --quiet HEAD -- || clear; d"

	##### Pull, clone, etc. #####

	# Pull in remote changes for the current repository and all its submodules
	pullall = !"git pull; git submodule foreach git pull origin master"

	# Amend the currently staged files to the latest commit
	amend = commit --amend --reuse-message=HEAD

	# Credit an author on the latest commit
	credit = "!f() { git commit --amend --author \"$1 <$2>\" -C HEAD; }; f"

	# Interactive rebase with the given number of latest commits
	reb = "!r() { git rebase -i HEAD~$1; }; r"

    ##### other #####

    root = rev-parse --show-toplevel
    head-sha = rev-parse --short HEAD
	# Show verbose output about tags, branches or remotes
	tags = tag -l
	branches = branch -a
	remotes = remote -v
	# Remove the old tag with this name and tag the latest commit with it.
	retag = "!r() { git tag -d $1 && git push origin :refs/tags/$1 && git tag $1; }; r"

	# Find branches containing commit
	fb = "!f() { git branch -a --contains $1; }; f"

	# Find tags containing commit
	ft = "!f() { git describe --always --contains $1; }; f"

	# Find commits by source code
	fc = "!f() { git log --pretty=format:'%C(yellow)%h  %Cblue%ad  %Creset%s%Cgreen  [%cn] %Cred%d' --decorate --date=short -S$1; }; f"

	# Find commits by commit message
	fm = "!f() { git log --pretty=format:'%C(yellow)%h  %Cblue%ad  %Creset%s%Cgreen  [%cn] %Cred%d' --decorate --date=short --grep=$1; }; f"

	# Remove branches that have already been merged with master
	# a.k.a. ‘delete merged’
	dmerged = "!git branch --merged | grep -v '\\*' | xargs -n 1 git branch -d"
	delete-merged-branches = "!f() { git checkout --quiet master && git branch --merged | grep --invert-match '\\*' | xargs -n 1 git branch --delete; git checkout --quiet @{-1}; }; f"


	# List contributors with number of commits
	contrib = shortlog --summary --numbered

	# Merge GitHub pull request on top of the current branch or,
	# if a branch name is specified, on top of the specified branch
	mpr = "!f() { \
		declare currentBranch=\"$(git symbolic-ref --short HEAD)\"; \
		declare branch=\"${2:-$currentBranch}\"; \
		if [ $(printf \"%s\" \"$1\" | grep '^[0-9]\\+$' > /dev/null; printf $?) -eq 0 ]; then \
			git fetch origin refs/pull/$1/head:pr/$1 && \
			git checkout -B $branch && \
			git rebase $branch pr/$1 && \
			git checkout -B $branch && \
			git merge pr/$1 && \
			git branch -D pr/$1 && \
			git commit --amend -m \"$(git log -1 --pretty=%B)\n\nCloses #$1.\"; \
		fi \
	}; f"

[log]
	# Show branch names with git log
	decorate = short

#[help]
#	autocorrect = 0

[rerere]
    enabled = true

[credential]
    # One week in-mem caching of HTTPS credentials
	helper = cache --timeout=604800

#### URL shorthands ####
[url "git@github.com:"]
	insteadOf = "gh:"
	pushInsteadOf = "github:"
	pushInsteadOf = "git://github.com/"

[url "git://github.com/"]
	insteadOf = "github:"

[url "git@gist.github.com:"]
	insteadOf = "gst:"
	pushInsteadOf = "gist:"
	pushInsteadOf = "git://gist.github.com/"

[url "git://gist.github.com/"]
    insteadOf = "gist:"

################################################################################
# This should probably stay at the end to overwrite global defaults
################################################################################
#
# https://www.semipol.de/2013/08/26/sharing-the-git-config-across-different-computers-with-individual-modifications.html
[include]
    path = .gitlocal

# Do not add stuff here.
[mergetool]
	keepBackup = false

[filter "lfs"]
	clean = git-lfs clean -- %f
	smudge = git-lfs smudge -- %f
	process = git-lfs filter-process
	required = true

[rebase]
	autoStash = true
